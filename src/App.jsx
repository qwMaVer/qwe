import "./App.css";
import { useState, useEffect } from "react";
import { motion } from "framer-motion";

function App() {
  const [activeTab, setActiveTab] = useState("roulette");
  const [user, setUser] = useState(null);
  const [result, setResult] = useState(null);
  const [spinning, setSpinning] = useState(false);
  const [rotation, setRotation] = useState(0);

  const prizes = [
    "üéÅ 50‚≠ê –±–æ–Ω—É—Å",
    "üéâ –°—Ç–∏–∫–µ—Ä Telegram",
    "üåü NFT –ø—Ä–∏–∑",
    "üò¢ –ü—É—Å—Ç–æ",
    "üî• –†–µ–¥–∫–∏–π NFT",
  ];

  useEffect(() => {
    const tg = window.Telegram.WebApp;
    tg.ready();

    const initData = tg.initDataUnsafe;
    if (initData?.user) {
      const u = initData.user;
      fetch("http://localhost:3000/user", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: u.id,
          first_name: u.first_name,
          username: u.username,
        }),
      })
        .then((res) => res.json())
        .then((data) => setUser(data))
        .catch((err) => console.error(err));
    }
  }, []);

  // üé∞ –ö—Ä—É—Ç–∫–∞
  const spinWheel = () => {
    if (!user || user.balance < 10 || spinning) {
      alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠ê –∏–ª–∏ –∫–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è");
      return;
    }

    setUser((prev) => ({ ...prev, balance: prev.balance - 10 }));
    const randomIndex = Math.floor(Math.random() * prizes.length);
    const segmentAngle = 360 / prizes.length;
    const finalRotation =
      rotation + 360 * 5 + (360 - randomIndex * segmentAngle - segmentAngle / 2);

    setRotation(finalRotation);
    setSpinning(true);

    setTimeout(() => {
      setSpinning(false);
      setResult(prizes[randomIndex]);

      fetch("http://localhost:3000/user/spin", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: user.id }),
      })
        .then((res) => res.json())
        .then((data) => setUser(data));
    }, 5000);
  };

  // üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  const addBalance = () => {
    fetch("http://localhost:3000/user/addBalance", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: user.id, amount: 50 }),
    })
      .then((res) => res.json())
      .then((data) => setUser(data));
  };

  return (
    <div className="app-container">
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={`content ${activeTab}`}>
        {activeTab === "roulette" && (
          <>
            <h1>üé∞ –†—É–ª–µ—Ç–∫–∞</h1>
            {user && (
              <>
                <div className="arrow"></div>
                <motion.div
                  className="wheel"
                  animate={{ rotate: rotation }}
                  transition={{ duration: 5, ease: "easeOut" }}
                />
                <button className="action spin-btn" onClick={spinWheel}>
                  üé≤ –ö—Ä—É—Ç–∏—Ç—å (10‚≠ê)
                </button>
                {result && <div className="result">üéØ {result}</div>}
              </>
            )}
          </>
        )}

        {activeTab === "balance" && (
          <>
            <h1>üí∞ –ë–∞–ª–∞–Ω—Å</h1>
            {user && (
              <>
                <p className="balance">‚≠ê {user.balance}</p>
                <button className="action balance-btn" onClick={addBalance}>
                  ‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å (+50‚≠ê)
                </button>
              </>
            )}
          </>
        )}

        {activeTab === "profile" && (
          <>
            <h1>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h1>
            {user ? (
              <>
                <p>–ò–º—è: {user.first_name}</p>
                <p>Username: @{user.username}</p>
                <p>ID: {user.id}</p>
              </>
            ) : (
              <p>–û—Ç–∫—Ä–æ–π MiniApp –≤ Telegram</p>
            )}
          </>
        )}
      </div>

      {/* –ù–∏–∂–Ω–µ–µ –º–µ–Ω—é */}
      <div className="bottom-nav">
        <button
          className={activeTab === "roulette" ? "active" : ""}
          onClick={() => setActiveTab("roulette")}
        >
          üé°
        </button>
        <button
          className={activeTab === "balance" ? "active" : ""}
          onClick={() => setActiveTab("balance")}
        >
          üí∞
        </button>
        <button
          className={activeTab === "profile" ? "active" : ""}
          onClick={() => setActiveTab("profile")}
        >
          üë§
        </button>
      </div>
    </div>
  );
}

export default App;
